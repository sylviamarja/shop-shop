{"version":3,"sources":["assets/spinner.gif","utils/reducers.js","utils/actions.js","utils/store.js","utils/helpers.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Success.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","products","categories","currentCategory","cart","cartOpen","reducers","state","action","type","product","map","_id","purchaseQuantity","newState","filter","length","store","createStore","reducer","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","oncomplete","close","ProductItem","item","image","name","price","quantity","useSelector","dispatch","useDispatch","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CHECKOUT","QUERY_CATEGORIES","QUERY_USER","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","categoryData","id","CartItem","placeholder","value","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","res","redirectToCheckout","sessionId","checkout","session","a","getCart","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","Success","addOrder","saveOrder","setTimeout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","errorLink","onError","graphQLErrors","message","client","ApolloClient","operation","setContext","headers","authorization","link","ApolloLink","from","HttpLink","uri","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.34e45bd0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","import {\n  UPDATE_PRODUCTS,\n  ADD_TO_CART,\n  UPDATE_CART_QUANTITY,\n  REMOVE_FROM_CART,\n  ADD_MULTIPLE_TO_CART,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  CLEAR_CART,\n  TOGGLE_CART,\n} from \"./actions\";\n\nconst initialState = {\n  products: [],\n  categories: [],\n  currentCategory: \"\",\n  cart: [],\n  cartOpen: false,\n};\n\nexport const reducers = (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products],\n      };\n\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product],\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map((product) => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        }),\n      };\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter((product) => {\n        return product._id !== action._id;\n      });\n\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState,\n      };\n\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: [],\n      };\n\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen,\n      };\n\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducers;\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';","import { createStore } from 'redux';\r\nimport reducer from './reducers';\r\n\r\nconst store = createStore(reducer);\r\nexport default store;","export function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n  return name + \"s\";\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open(\"shop-shop\", 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores\n    request.onupgradeneeded = function (e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore(\"products\", { keyPath: \"_id\" });\n      db.createObjectStore(\"categories\", { keyPath: \"_id\" });\n      db.createObjectStore(\"cart\", { keyPath: \"_id\" });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function (e) {\n      console.log(\"There was an error\");\n    };\n\n    // on database open success\n    request.onsuccess = function (e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, \"readwrite\");\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function (e) {\n        console.log(\"error\", e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function () {\n        db.close();\n      };\n    };\n  });\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\";\n// import { useStoreContext } from \"../../utils/GlobalState\";\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nfunction ProductItem(item) {\n  const { image, name, _id, price, quantity } = item;\n\n  // const [state, dispatch] = useStoreContext();\n  const state = useSelector((state) => state);\n\n  const dispatch = useDispatch();\n\n  const { cart } = state;\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n      idbPromise(\"cart\", \"put\", {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 },\n      });\n      idbPromise(\"cart\", \"put\", { ...item, purchaseQuantity: 1 });\n    }\n  };\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img alt={name} src={`/images/${image}`} />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>\n          {quantity} {pluralize(\"item\", quantity)} in stock\n        </div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import gql from 'graphql-tag';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n{\n  categories {\n    _id\n    name\n  }\n}\n`;\n\nexport const QUERY_USER = gql`\n{\n  user {\n    firstName\n    lastName\n    orders {\n      _id\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        image\n      }\n    }\n  }\n}\n`;","import React, { useEffect } from \"react\";\nimport ProductItem from \"../ProductItem\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { UPDATE_PRODUCTS } from \"../../utils/actions\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport spinner from \"../../assets/spinner.gif\"\n\nfunction ProductList() {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if(data) {\n      dispatch({\n           type: UPDATE_PRODUCTS,\n          products: data.products\n        });\n        data.products.forEach((product) => {\n          idbPromise('products', 'put', product);\n        });\n    } else if (!loading) {\n      idbPromise('products', 'get').then((products) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n         products: products\n       });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n            {filterProducts().map(product => (\n                <ProductItem\n                  key= {product._id}\n                  _id={product._id}\n                  image={product.image}\n                  name={product.name}\n                  price={product.price}\n                  quantity={product.quantity}\n                />\n            ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      { loading ? \n      <img src={spinner} alt=\"loading\" />: null}\n    </div>\n  );\n}\n\nexport default ProductList;","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu() {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nconst CartItem = ({ item }) => {\n  const dispatch = useDispatch();\n\n  const removeFromCart = item => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id\n    });\n    idbPromise('cart', 'delete', { ...item });\n\n  };\n\n  const onChange = (e) => {\n    const value = e.target.value;\n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id\n      });\n      idbPromise('cart', 'delete', { ...item });\n\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n\n    }\n  }\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from \"react\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport { QUERY_CHECKOUT } from \"../../utils/queries\"\nimport { idbPromise } from \"../../utils/helpers\"\nimport CartItem from \"../CartItem\";\nimport Auth from \"../../utils/auth\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\nimport \"./style.css\";\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session })\n      })\n    }\n  }, [data]);\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    };\n\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach(item => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  function submitCheckout() {\n    const productIds = [];\n\n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n\n    getCheckout({\n      variables: { products: productIds }\n    });\n  }\n\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span\n          role=\"img\"\n          aria-label=\"trash\">🛒</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>[close]</div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map(item => (\n            <CartItem key={item._id} item={item} />\n          ))}\n\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n\n            {\n              Auth.loggedIn() ?\n                <button onClick={submitCheckout}>\n                  Checkout\n              </button>\n                :\n                <span>(log in to check out)</span>\n            }\n          </div>\n        </div>\n      ) : (\n          <h3>\n            <span role=\"img\" aria-label=\"shocked\">\n              😱\n          </span>\n          You haven't added anything to your cart yet!\n          </h3>\n        )}\n    </div>\n  );\n};\n\nexport default Cart;","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from '../components/Cart';\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Cart from \"../components/Cart\";\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from \"../utils/actions\";\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\nimport { idbPromise } from \"../utils/helpers\";\nimport spinner from '../assets/spinner.gif'\n\nfunction Detail() {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    } \n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n\n    }\n  }\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  return (\n    <>\n      {currentProduct && cart ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">\n            ← Back to Products\n          </Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>\n            {currentProduct.description}\n          </p>\n\n          <p>\n            <strong>Price:</strong>\n            ${currentProduct.price}\n            {\" \"}\n            <button onClick={addToCart}>\n              Add to Cart\n            </button>\n            <button \n              disabled={!cart.find(p => p._id === currentProduct._id)} \n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {\n        loading ? <img src={spinner} alt=\"loading\" /> : null\n      }\n      <Cart />\n    </>\n  );\n};\n\nexport default Detail;","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import gql from 'graphql-tag';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      } \n      }\n    }\n  }\n`;\n\n\nexport const ADD_USER = gql`\n  mutation addUser($firstName: String!, $lastName: String!, $email: String!, $password: String!) {\n    addUser(firstName: $firstName, lastName: $lastName, email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;","import React, { useState } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { Link } from \"react-router-dom\";\nimport { LOGIN } from \"../utils/mutations\"\nimport Auth from \"../utils/auth\";\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' })\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({ variables: { email: formState.email, password: formState.password } })\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e)\n    }\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">\n        ← Go to Signup\n      </Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {\n          error ? <div>\n            <p className=\"error-text\" >The provided credentials are incorrect</p>\n          </div> : null\n        }\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from \"../utils/auth\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email, password: formState.password,\n        firstName: formState.firstName, lastName: formState.lastName\n      }\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">\n        ← Go to Login\n      </Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport Jumbotron from '../components/Jumbotron';\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Success() {\n    const [addOrder] = useMutation(ADD_ORDER);\n\n    useEffect(() => {\n      async function saveOrder() {\n        const cart = await idbPromise('cart', 'get');\n        const products = cart.map(item => item._id);\n\n        if (products.length) {\n            const { data } = await addOrder({ variables: { products } });\n            const productData = data.addOrder.products;\n          \n            productData.forEach((item) => {\n              idbPromise('cart', 'delete', item);\n            });\n          }\n      }\n    \n      saveOrder();\n    }, [addOrder]);\n\n    setTimeout(function() { window.location.assign(\"/\")}, 3000);\n\n    return (\n        <div>\n            <Jumbotron>\n                <h1>Success!</h1>\n                <h2>\n                    Thank you for your purchase!\n                </h2>\n                <h2>\n                    You will now be redirected to the homepage.\n                </h2>\n            </Jumbotron>\n        </div>\n    );\n};\n\nexport default Success;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_USER } from \"../utils/queries\";\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">\n          ← Back to Products\n          </Link>\n\n        {user ? (\n          <>\n            <h2>Order History for {user.firstName} {user.lastName}</h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>{new Date(parseInt(order.purchaseDate)).toLocaleDateString()}</h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img\n                          alt={name}\n                          src={`/images/${image}`}\n                        />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n\n      </div>\n\n    </>)\n\n};\n\nexport default OrderHistory;\n","import ApolloClient, { ApolloLink, HttpLink } from 'apollo-boost';\nimport { onError } from 'apollo-link-error'\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { Provider } from 'react-redux';\nimport store from './utils/store';\nimport Home from \"./pages/Home\";\nimport Detail from \"./pages/Detail\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Nav from \"./components/Nav\";\nimport Success from \"./pages/Success\";\nimport OrderHistory from \"./pages/OrderHistory\";\n\nconst errorLink = onError(({ graphQLErrors }) => {\n  if (graphQLErrors) graphQLErrors.map(({ message }) => console.log(message))\n});\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem('id_token')\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      },\n      link: ApolloLink.from([errorLink, HttpLink])\n    })\n  },\n  uri: '/graphql',\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <Provider store={store}>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route component={NoMatch} />\n            </Switch>\n          </Provider>\n        </div>\n      </Router>\n    </ApolloProvider>\n\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}